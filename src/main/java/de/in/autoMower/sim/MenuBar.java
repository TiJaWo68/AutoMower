package de.in.autoMower.sim;

import java.awt.event.ActionEvent;

import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.KeyStroke;

public class MenuBar {

	// Instance variable for the action buttons in file menu
	private MyActions openProjectAct, changeImageAct, saveProjectAct, exitAct;

	// New Instance of class TheMethods
	MethodsMenuBar methods = new MethodsMenuBar();

	// The inner class for the  actions
	class MyActions extends AbstractAction {

		// generated by Eclipse
		private static final long serialVersionUID = -3424962951334279532L;

		// The constructor for the inner class MyActions
		public MyActions(String text, ImageIcon icon, String toolTip, KeyStroke shortCut, String actionText ) {
			super(text,icon);
			putValue(SHORT_DESCRIPTION, toolTip);
			putValue(ACCELERATOR_KEY, shortCut);
			putValue(ACTION_COMMAND_KEY, actionText);

		} // End of the constructor

		@Override
		public void actionPerformed(ActionEvent e) {

			// Action event for button open Project
			if (e.getActionCommand().equals("open"))
				methods.openProject();
			
			if (e.getActionCommand().equals("change"))
				methods.changeImage(null);

			if (e.getActionCommand().equals("save"))
				methods.saveProject();

			// Action event for Button Quit
			if (e.getActionCommand().equals("exit"))
				methods.exit();


		} // End the method actionPerformed()

	} // End of the inner class MyActions

	// The constructor for the class MenuBar
	public MenuBar(String text) {
		openProjectAct = new MyActions("Open Project", null, "Opens an existing project", null, "open");
		changeImageAct = new MyActions("Change Image", null, "Change picture in the project", null, "change");
		saveProjectAct = new MyActions("Save Project", null, "Saves the project in a zip file", null, "save");
		exitAct = new MyActions("Quit", null, "Quits the Application", null, "exit");
	}

	// The method for the menuBar
	protected JMenuBar menuBar() {

		// The complete menu bar
		JMenuBar menu = new JMenuBar();

		// The file menu is inserted in the menu bar
		menu.add(menuFile());

		return menu;

	} // End of method menuBar()

	// The method for Menu File
	private JMenu menuFile() {
		JMenu fileMenu = new JMenu();
		fileMenu.setText("File");

		fileMenu.add(openProjectAct);
		fileMenu.add(changeImageAct);
		fileMenu.add(saveProjectAct);
		fileMenu.addSeparator();
		fileMenu.add(exitAct);
		return fileMenu;
	}

}
